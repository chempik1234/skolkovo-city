services:
  admin:
    build:
      context: ../skolkovo_admin/
      dockerfile: ../docker/Dockerfile.admin
    ports:
      - "8080:8080"
    # volumes:
    #   - media-data:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ../config/.env
    command: >
      sh -c "python manage.py migrate ; 
      python manage.py migrate sessions ; 
      python manage.py runserver 0.0.0.0:8080 --noreload"

  bot:
    container_name: bot
    build:
      dockerfile: ../docker/Dockerfile.bot
      context: ../bot
    command: python main.py
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ../config/.env
    ports:
      - "5000:5000"

  db:
    container_name: db
    image: postgres:16.3
    ports:
      - "5432:5432"
    env_file:
      - ../config/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    env_file:
      - ../config/.env
    command: /bin/sh -c "redis-server --requirepass $$REDIS_PASSWORD"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping" ]
      interval: 10s
      timeout: 1s
      retries: 3

  #region monitoring made by donBarbos https://github.com/donBarbos/telegram-bot-template
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude"
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"

  prometheus:
    image: prom/prometheus:v2.43.0
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - bot
      - node-exporter
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"

  grafana:
    image: grafana/grafana:8.5.22
    container_name: grafana
    restart: unless-stopped
    env_file:
      - ../config/.env.grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - ../configs/grafana/datasources:/etc/grafana/provisioning/datasources
      - ../configs/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ../configs/grafana/node-exporter.json:/var/lib/grafana/dashboards/node-exporter.json
      - grafana-data:/var/lib/grafana
    user: "0"
  #endregion

volumes:
  postgres_data:
  redis-data:
  prometheus-data:
  grafana-data:
