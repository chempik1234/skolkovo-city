x-def-logging: &default-logging
  logging:
    driver: "loki"
    options:
      loki-url: "http://localhost:3100/loki/api/v1/push"
      loki-batch-size: "100"
      loki-retries: 2
      loki-max-backoff: 1000ms
      loki-timeout: 1s
      labels: "service={{.Name}},instance={{.ID}}"

x-bot-template: &bot-template
  build:
    dockerfile: ../docker/Dockerfile.bot
    context: ../bot
  command: python main.py
  restart: unless-stopped
  env_file:
    - ../config/.env
  healthcheck:
    test: [ "CMD", "curl", "-f", "http://localhost:5000/metrics" ]
    interval: 30s
    timeout: 5s
    retries: 3
  networks:
    - bot-network
  <<: *default-logging

x-worker-template: &worker-template
  <<: *bot-template
  command: python news_worker.py

services:
  admin:
    build:
      context: ../skolkovo_admin/
      dockerfile: ../docker/Dockerfile.admin
    ports:
      - "8080:8080"
    volumes:
      - media-data:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ../config/.env
    command: >
      sh -c "python manage.py migrate ; 
      python manage.py migrate sessions ; 
      python manage.py runserver 0.0.0.0:8080 --noreload"
    networks:
      - bot-network

  #region bot
  bot1:
    <<: *bot-template
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "5001:5000"
    environment:
      - BOT_WEBHOOK_PORT=5000
      - BOT_INSTANCE_NAME=bot1
  bot2:
    <<: *bot-template
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "5002:5000"
    environment:
      - BOT_WEBHOOK_PORT=5000
      - BOT_INSTANCE_NAME=bot2
  bot3:
    <<: *bot-template
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "5003:5000"
    environment:
      - BOT_WEBHOOK_PORT=5000
      - BOT_INSTANCE_NAME=bot3
  #endregion

  #region worker
  worker:
    <<: *worker-template
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    expose:
      - "6000"
    environment:
      - BOT_WEBHOOK_PORT=6000
      - BOT_INSTANCE_NAME=worker
    scale: 3
    networks:
      - bot-network
  #endregion

  db:
    container_name: db
    image: postgres:16.3
    ports:
      - "5432:5432"
    env_file:
      - ../config/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bot-network

  redis:
    container_name: redis
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ../redis/redis.conf:/usr/local/etc/redis/redis.conf
    env_file:
      - ../config/.env
    command: /bin/sh -c "redis-server --requirepass $$REDIS_PASSWORD"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping" ]
      interval: 10s
      timeout: 1s
      retries: 3
    networks:
      - bot-network

  rabbitmq:
    image: rabbitmq:4.1-management-alpine
    hostname: rabbitmq
    restart: always
    env_file:
      - ../config/.env
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics -q ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bot-network

  #region monitoring
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
      - "9095:9095"
    volumes:
      - ../loki/loki-config.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3100/ready" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - bot-network

  # made by donBarbos https://github.com/donBarbos/telegram-bot-template
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude"
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - bot-network

  prometheus:
    image: prom/prometheus:v2.43.0
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ../prometheus/targets.json:/etc/prometheus/targets.json
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - node-exporter
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    networks:
      - bot-network

  grafana:
    image: grafana/grafana:8.5.22
    container_name: grafana
    restart: unless-stopped
    env_file:
      - ../config/.env.grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - ../grafana/datasources:/etc/grafana/provisioning/datasources
      - ../grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ../grafana/preload_dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    user: "0"
    networks:
      - bot-network
  #endregion

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/conf.d:/etc/nginx/conf.d
      - ../nginx/ssl:/etc/nginx/ssl
      - media-data:/home/app/admin/media
    networks:
      - bot-network
    depends_on:
      - bot1
      - bot2
      - bot3
      - admin

networks:
  bot-network:
    driver: bridge

volumes:
  media-data:
  postgres_data:
  redis-data:
  prometheus-data:
  grafana-data:
